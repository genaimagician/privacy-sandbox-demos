steps:
  # Read environment variables we will use to deploy to Cloud Run
  - name: "bash"
    id: read-env
    waitFor: ["-"]
    env:
      - "PROJECT_ENV=$_PROJECT_ENV"
    script: |
      #!/usr/bin/env bash

      ENV_VARS=$(cat cicd/.env.${PROJECT_ENV} | grep "=" | grep -v "^PORT=" | sed '/^$/d' | tr "\n" "@")
      echo ${ENV_VARS}
      echo ${ENV_VARS} > /workspace/env_vars.txt
  # Copy the Privacy Sandbox Attestation files for the target environment
  - name: "bash"
    id: copy-attestations
    waitFor: ["-"]
    env:
      - "PROJECT_ENV=$_PROJECT_ENV"
    script: |
      #!/usr/bin/env bash
      cp -f cicd/attestations/privacy-sandbox-attestations.json.*.${PROJECT_ENV} services/ad-tech/src/public/.well-known/

  # HOME
  # Build the HTML files with docusaurus
  - name: "node"
    id: npm-install-home
    waitFor: ["-"]
    entrypoint: "npm"
    args: ["--prefix", "services/home", "install"]

  - name: "node"
    id: npm-run-build-home
    waitFor:
      - npm-install-home
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source cicd/.env.${_PROJECT_ENV}
        export HOME_HOST
        export HOME_MEASUREMENT_ID
        npm --prefix services/home run build

  # Build the container image
  - name: "gcr.io/cloud-builders/docker"
    id: build-home
    waitFor:
      - npm-run-build-home
    args:
      [
        "build",
        "-t",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/home:$COMMIT_SHA",
        "services/home",
      ]

  # Push the container image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    id: push-home
    waitFor:
      - build-home
    args:
      [
        "push",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/home:$COMMIT_SHA",
      ]

  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-home
    waitFor:
      - push-home
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "HOME_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy home --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/home:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --set-env-vars "^@^$${ENV_VARS}"

  # NEWS
  # Build the container image
  - name: "gcr.io/cloud-builders/docker"
    id: build-news
    waitFor: ["-"]
    args:
      [
        "build",
        "-t",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/news:$COMMIT_SHA",
        "services/news",
      ]
  # Push the container image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    id: push-news
    waitFor:
      - build-news
    args:
      [
        "push",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/news:$COMMIT_SHA",
      ]
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-news
    waitFor:
      - push-news
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "NEWS_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy news --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/news:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --set-env-vars "^@^$${ENV_VARS}"

  # SHOP
  # Build the container image
  - name: "gcr.io/cloud-builders/docker"
    id: build-shop
    waitFor: ["-"]
    args:
      [
        "build",
        "-t",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/shop:$COMMIT_SHA",
        "services/shop",
      ]
  # Push the container image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    id: push-shop
    waitFor:
      - build-shop
    args:
      [
        "push",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/shop:$COMMIT_SHA",
      ]
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-shop
    waitFor:
      - push-shop
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "SHOP_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy shop --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/shop:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --session-affinity --set-env-vars "^@^$${ENV_VARS}"

  # TRAVEL
  # Build the container image
  - name: "gcr.io/cloud-builders/docker"
    id: build-travel
    waitFor: ["-"]
    args:
      [
        "build",
        "-t",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/travel:$COMMIT_SHA",
        "services/travel",
      ]
  # Push the container image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    id: push-travel
    waitFor:
      - build-travel
    args:
      [
        "push",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/travel:$COMMIT_SHA",
      ]
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-travel
    waitFor:
      - push-travel
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "TRAVEL_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy travel --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/travel:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --set-env-vars "^@^$${ENV_VARS}"

  # AD-TECH
  # Build the ad-tech image
  - name: "gcr.io/cloud-builders/docker"
    id: build-ad-tech
    waitFor:
      - copy-attestations
    args:
      [
        "build",
        "-t",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA",
        "services/ad-tech",
      ]
  # Push the container image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    id: push-ad-tech
    waitFor:
      - build-ad-tech
    args:
      [
        "push",
        "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA",
      ]

  # DSP
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-dsp
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "DSP_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy dsp --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=dsp,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # DSP-A
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-dsp-a
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "DSP_A_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy dsp-a --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=dsp-a,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # DSP-B
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-dsp-b
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "DSP_B_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy dsp-b --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=dsp-b,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # SSP
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-ssp
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "SSP_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy ssp --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=ssp,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # SSP-A
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-ssp-a
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "SSP_A_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy ssp-a --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=ssp-a,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # SSP-B
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-ssp-b
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "SSP_B_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy ssp-b --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=ssp-b,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

  # AD-SERVER
  # Deploy container image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy-ad-server
    waitFor:
      - push-ad-tech
      - read-env
    entrypoint: "bash"
    args:
      - "-c"
      - |
        ENV_VARS=$(cat /workspace/env_vars.txt)
        HOSTNAME_ENV="HOSTNAME=$(grep "AD_SERVER_HOST=" cicd/.env.${_PROJECT_ENV} | cut -d '=' -f2)"
        ENV_VARS=$${HOSTNAME_ENV}@$${ENV_VARS}
        echo $${ENV_VARS}
        gcloud run deploy ad-server --image ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA --platform managed --region ${_LOCATION} --memory 2Gi --min-instances 1 --allow-unauthenticated --command npm --args=run,start,--service=ad-server,--project_env=${_PROJECT_ENV} --set-env-vars "^@^$${ENV_VARS}"

images:
  - "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/ad-tech:$COMMIT_SHA"
  - "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/home:$COMMIT_SHA"
  - "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/news:$COMMIT_SHA"
  - "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/shop:$COMMIT_SHA"
  - "${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/travel:$COMMIT_SHA"

options:
  machineType: "E2_HIGHCPU_8"
